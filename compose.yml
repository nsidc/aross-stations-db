x-common: &common
  logging:
    options:
      max-size: "20m"
      max-file: "5"

# TODO: Use a tag!
x-image: &image "nsidc/aross-stations-db"

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.api.address=:8000
      # - --entrypoints.api.http.redirections.entryPoint.to=apisecure
      # - --entrypoints.api.http.redirections.entryPoint.scheme=https
      # - --entrypoints.apisecure.address=:8001
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=scott.lewis@colorado.edu
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      # - --certificatesresolvers.letsencrypt.acme.email=scott.lewis@colorado.edu
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # - --api.dashboard=true
      - --providers.docker=true
      # - --providers.file.filename=/cert/tls.yml
      - --log.level=INFO
    ports:
      - "8000:8000"
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # - /cert:/cert:ro
      - ./config:/letsencrypt #chmod 600
    labels:
      - "traefik.enable=true"
    restart: unless-stopped

  ui:
    container_name: "aross-stations-ui"
    depends_on: ["api"]
    image: "nsidc/aross-stations-ui:v0.1.1"
    # ports:
    #   - "5143:80"
    labels:
      - "traefik.enable=true"

      # local
      - "traefik.http.routers.localhost.rule=Host(`localhost`)"
      - "traefik.http.routers.localhost.entrypoints=websecure"
      - "traefik.http.routers.localhost.tls=true"
      - "traefik.http.routers.localhost.tls.certresolver=letsencrypt"

      # Production domain (nsidc.org)
      - "traefik.http.routers.aross-prod.rule=Host(`nsidc.org`) && PathPrefix(`/apps/aross`)"
      # - "traefik.http.routers.aross-prod.entrypoints=websecure"
      # - "traefik.http.routers.aross-prod.tls.certresolver=letsencrypt"
      - "traefik.http.routers.aross-prod.middlewares=strip-aross-path"

      # Integration domain router
      - "traefik.http.routers.aross-integration.rule=Host(`integration.aross-stations.apps.int.nsidc.org`)"
      - "traefik.http.routers.aross-integration.entrypoints=websecure"
      - "traefik.http.routers.aross-integration.tls=true"
      - "traefik.http.routers.aross-integration.tls.certresolver=letsencrypt"  # Or omit if using self-signed certs

      # QA domain router
      - "traefik.http.routers.aross-qa.rule=Host(`qa.aross-stations.apps.int.nsidc.org`)"
      # - "traefik.http.routers.aross-qa.entrypoints=websecure"
      # - "traefik.http.routers.aross-qa.tls.certresolver=letsencrypt"  # Or omit if using self-signed certs

      # Staging domain router
      - "traefik.http.routers.aross-staging.rule=Host(`staging.aross-stations.apps.int.nsidc.org`)"
      - "traefik.http.routers.aross-staging.entrypoints=websecure"
      - "traefik.http.routers.aross-staging.tls=true"
      - "traefik.http.routers.aross-staging.tls.certresolver=letsencrypt"  # Or omit if using self-signed certs

      # Middleware for path
      - "traefik.http.middlewares.strip-aross-path.stripPrefix.prefixes=/apps/aross"
    restart: unless-stopped
    profiles: ["ui"]

  # ui:
  #   container_name: "aross-stations-ui"
  #   depends_on: ["api"]
  #   image: "nsidc/aross-stations-ui:v0.1.0"
  #   ports:
  #     - "80:80"
  #   profiles: ["ui"]


  api:
    container_name: "aross-stations-api"
    depends_on: ["db"]
    image: *image
    <<: *common

    entrypoint: "fastapi"
    command: ["run", "--host", "0.0.0.0", "./src/aross_stations_db/api"]
    # ports:
      # - "8000:8000"

    labels:
      - "traefik.enable=true"

      # local
      - "traefik.http.routers.localhost_api.rule=Host(`localhost`)"
      - "traefik.http.routers.localhost_api.entrypoints=api"
      - "traefik.http.routers.localhost_api.tls=true"
      - "traefik.http.routers.localhost_api.tls.certresolver=letsencrypt"
      - "traefik.http.services.localhost_api.loadbalancer.server.port=8000"

    environment:
      AROSS_DB_CONNSTR: null


  db:
    container_name: "aross-stations-db"
    image: "postgis/postgis:16-3.4-alpine"
    <<: *common

    environment:
      POSTGRES_DB: "aross"
      POSTGRES_USER: "aross"
      POSTGRES_PASSWORD: null
    ports:
      - "5432:5432"
    volumes:
      - "./_data:/var/lib/postgresql/data"


  admin:
    container_name: "aross-stations-admin"
    depends_on: ["db"]
    image: "adminer"
    <<: *common

    ports:
      - "8080:8080"
    restart: "unless-stopped"


  cli:
    container_name: "aross-stations-cli"
    depends_on: ["db"]
    image: *image
    <<: *common

    volumes:
      - "${AROSS_DATA_BASEDIR}:/data"
    environment:
      AROSS_DATA_BASEDIR: "/data"
      AROSS_DB_CONNSTR: null
    # Prevents this "service" from running with `docker compose up`.
    # Instead, it's intended to be used like `docker compose run cli --help`.
    profiles: ["_"]


  jupyterlab:
    container_name: "aross-stations-jupyterlab"
    depends_on: ["api"]
    image: *image
    <<: *common

    entrypoint: "jupyter"
    command: ["lab", "--allow-root", "--ip=0.0.0.0"]
    ports:
      - "8888:8888"
    environment:
      JUPYTER_TOKEN: "${POSTGRES_PASSWORD}"
